// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  contacts      Contact[] @relation("UserToContact")
  classes       Classe[]  @relation("UserToClasse")
  eleves        Eleve[]   @relation("UserToEleve")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Annee {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  slug         String?       @unique
  inscriptions Inscription[] @relation("AnneeToInscription")
  Note         Note[]
}

model Classe {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  createdBy   User      @relation("UserToClasse", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Contact {
  id          Int       @id @default(autoincrement())
  createdBy   User      @relation("UserToContact", fields: [createdById], references: [id])
  createdById String
  prenom      String
  nom         String
  email       String    @unique
  description String?
  phone       String?
  adresse     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Eleve {
  id           Int           @id @default(autoincrement())
  matricule    String
  nom          String
  prenom       String
  sexe         String        @default("M")
  datenais     String?
  lieunais     String?
  adresse      String?
  email        String?
  phone        String?
  photo        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  createdBy    User          @relation("UserToEleve", fields: [createdById], references: [id])
  createdById  String
  notes        Note[]
  inscriptions Inscription[]
  resultats    Resultat[]    @relation("EleveToResultat")
}

model Inscription {
  id        Int      @id @default(autoincrement())
  anneeId   Int
  eleveId   Int
  classeId  Int
  montant   Int?     @default(0)
  frais     Int?     @default(0)
  moyenne1  Float?   @default(0)
  moyenne2  Float?   @default(0)
  moyenne3  Float?   @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  annees    Annee    @relation("AnneeToInscription", fields: [anneeId], references: [id])
  eleves    Eleve    @relation(fields: [eleveId], references: [id])
}

model Evaluation {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique
  periode   String
  notes     Note[]     @relation("EvaluationToNotes")
  resultats Resultat[] @relation("EvaluationToResultat")
}

model Discipline {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  matieres Matiere[]
}

model Matiere {
  id           Int        @id @default(autoincrement())
  name         String
  slug         String     @unique
  coefficient  Int        @default(1)
  disciplineId Int
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  notes        Note[]     @relation("MatiereToNote")
}

model Note {
  id           Int        @id @default(autoincrement())
  eleveId      Int
  eleves       Eleve      @relation(fields: [eleveId], references: [id])
  annee        Annee      @relation(fields: [anneeId], references: [id])
  score        Int        @default(0)
  matiereId    Int
  evaluationId Int
  evaluation   Evaluation @relation("EvaluationToNotes", fields: [evaluationId], references: [id])
  matiere      Matiere    @relation("MatiereToNote", fields: [matiereId], references: [id])

  anneeId Int
}

model Resultat {
  id           Int        @id @default(autoincrement())
  eleveId      Int
  anneeId      Int
  evaluationId Int
  total        Int        @default(0)
  moyenne      Float?
  rang         Int?
  decision     String?    @default("Passable")
  observation  String?
  eleve        Eleve      @relation("EleveToResultat", fields: [eleveId], references: [id])
  evaluation   Evaluation @relation("EvaluationToResultat", fields: [evaluationId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
}
